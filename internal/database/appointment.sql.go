// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: appointment.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createAppointment = `-- name: CreateAppointment :one
insert into appointment(id, created_at, updated_at, status, patient_id, availability_id)
values ($1, $2, $3, $4, $5, $6)
returning id, created_at, updated_at, status, patient_id, availability_id
`

type CreateAppointmentParams struct {
	ID             uuid.UUID
	CreatedAt      time.Time
	UpdatedAt      time.Time
	Status         AppointmentStatus
	PatientID      uuid.UUID
	AvailabilityID uuid.UUID
}

func (q *Queries) CreateAppointment(ctx context.Context, arg CreateAppointmentParams) (Appointment, error) {
	row := q.db.QueryRowContext(ctx, createAppointment,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Status,
		arg.PatientID,
		arg.AvailabilityID,
	)
	var i Appointment
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
		&i.PatientID,
		&i.AvailabilityID,
	)
	return i, err
}

const deleteAppointment = `-- name: DeleteAppointment :one
delete from appointment where patient_id = $1 and id = $2
returning id, created_at, updated_at, status, patient_id, availability_id
`

type DeleteAppointmentParams struct {
	PatientID uuid.UUID
	ID        uuid.UUID
}

func (q *Queries) DeleteAppointment(ctx context.Context, arg DeleteAppointmentParams) (Appointment, error) {
	row := q.db.QueryRowContext(ctx, deleteAppointment, arg.PatientID, arg.ID)
	var i Appointment
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
		&i.PatientID,
		&i.AvailabilityID,
	)
	return i, err
}

const getAppointmentsPatient = `-- name: GetAppointmentsPatient :many
select ap.id, ap.created_at, ap.updated_at, ap.status, ap.patient_id, ap.availability_id,av.location,av.timing,av.duration,av.treatment,d.name,d.specialty from appointment ap
inner join availability av
on ap.availability_id = av.id
inner join doctor d
on av.doctor_id = d.id
where status = $1 and location like $2 and treatment like $3 and timing between $4 and $5 and patient_id = $6
limit $7
offset $8
`

type GetAppointmentsPatientParams struct {
	Status    AppointmentStatus
	Location  string
	Treatment string
	Timing    time.Time
	Timing_2  time.Time
	PatientID uuid.UUID
	Limit     int32
	Offset    int32
}

type GetAppointmentsPatientRow struct {
	ID             uuid.UUID
	CreatedAt      time.Time
	UpdatedAt      time.Time
	Status         AppointmentStatus
	PatientID      uuid.UUID
	AvailabilityID uuid.UUID
	Location       string
	Timing         time.Time
	Duration       int32
	Treatment      string
	Name           string
	Specialty      string
}

func (q *Queries) GetAppointmentsPatient(ctx context.Context, arg GetAppointmentsPatientParams) ([]GetAppointmentsPatientRow, error) {
	rows, err := q.db.QueryContext(ctx, getAppointmentsPatient,
		arg.Status,
		arg.Location,
		arg.Treatment,
		arg.Timing,
		arg.Timing_2,
		arg.PatientID,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAppointmentsPatientRow
	for rows.Next() {
		var i GetAppointmentsPatientRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Status,
			&i.PatientID,
			&i.AvailabilityID,
			&i.Location,
			&i.Timing,
			&i.Duration,
			&i.Treatment,
			&i.Name,
			&i.Specialty,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNumAppointmentsPatient = `-- name: GetNumAppointmentsPatient :one
select count(*) from appointment ap
inner join availability av
on ap.availability_id = av.id
inner join doctor d
on av.doctor_id = d.id
where status = $1 and location like $2 and treatment like $3 and timing between $4 and $5 and patient_id = $6
`

type GetNumAppointmentsPatientParams struct {
	Status    AppointmentStatus
	Location  string
	Treatment string
	Timing    time.Time
	Timing_2  time.Time
	PatientID uuid.UUID
}

func (q *Queries) GetNumAppointmentsPatient(ctx context.Context, arg GetNumAppointmentsPatientParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, getNumAppointmentsPatient,
		arg.Status,
		arg.Location,
		arg.Treatment,
		arg.Timing,
		arg.Timing_2,
		arg.PatientID,
	)
	var count int64
	err := row.Scan(&count)
	return count, err
}
