// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: doctor.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createDoctor = `-- name: CreateDoctor :one
insert into doctor(id, created_at, updated_at, name, specialty,license_number, user_id)
values ($1, $2, $3, $4, $5, $6, $7)
returning id, created_at, updated_at, name, specialty, license_number, user_id
`

type CreateDoctorParams struct {
	ID            uuid.UUID
	CreatedAt     time.Time
	UpdatedAt     time.Time
	Name          string
	Specialty     string
	LicenseNumber string
	UserID        uuid.UUID
}

func (q *Queries) CreateDoctor(ctx context.Context, arg CreateDoctorParams) (Doctor, error) {
	row := q.db.QueryRowContext(ctx, createDoctor,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.Specialty,
		arg.LicenseNumber,
		arg.UserID,
	)
	var i Doctor
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Specialty,
		&i.LicenseNumber,
		&i.UserID,
	)
	return i, err
}

const getAllDoctorsWithPage = `-- name: GetAllDoctorsWithPage :many
select id, created_at, updated_at, name, specialty, license_number, user_id from doctor
where specialty like $1 and name like $2
limit $3
offset $4
`

type GetAllDoctorsWithPageParams struct {
	Specialty string
	Name      string
	Limit     int32
	Offset    int32
}

func (q *Queries) GetAllDoctorsWithPage(ctx context.Context, arg GetAllDoctorsWithPageParams) ([]Doctor, error) {
	rows, err := q.db.QueryContext(ctx, getAllDoctorsWithPage,
		arg.Specialty,
		arg.Name,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Doctor
	for rows.Next() {
		var i Doctor
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Specialty,
			&i.LicenseNumber,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDoctorFromUserId = `-- name: GetDoctorFromUserId :one
select id, created_at, updated_at, name, specialty, license_number, user_id from doctor where user_id = $1
`

func (q *Queries) GetDoctorFromUserId(ctx context.Context, userID uuid.UUID) (Doctor, error) {
	row := q.db.QueryRowContext(ctx, getDoctorFromUserId, userID)
	var i Doctor
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Specialty,
		&i.LicenseNumber,
		&i.UserID,
	)
	return i, err
}

const getNumOfAllDoctorsWithPage = `-- name: GetNumOfAllDoctorsWithPage :one
select count(*) from doctor
where specialty like $1 and name like $2
`

type GetNumOfAllDoctorsWithPageParams struct {
	Specialty string
	Name      string
}

func (q *Queries) GetNumOfAllDoctorsWithPage(ctx context.Context, arg GetNumOfAllDoctorsWithPageParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, getNumOfAllDoctorsWithPage, arg.Specialty, arg.Name)
	var count int64
	err := row.Scan(&count)
	return count, err
}
