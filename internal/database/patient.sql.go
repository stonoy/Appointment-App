// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: patient.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const checkUserIsPatient = `-- name: CheckUserIsPatient :one
select id, created_at, updated_at, name, age, gender, user_id
from patient where user_id = $1
`

func (q *Queries) CheckUserIsPatient(ctx context.Context, userID uuid.UUID) (Patient, error) {
	row := q.db.QueryRowContext(ctx, checkUserIsPatient, userID)
	var i Patient
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Age,
		&i.Gender,
		&i.UserID,
	)
	return i, err
}

const createPatient = `-- name: CreatePatient :one
insert into patient(id, created_at, updated_at, name, age, gender, user_id)
values ($1, $2, $3, $4, $5, $6, $7)
returning id, created_at, updated_at, name, age, gender, user_id
`

type CreatePatientParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Name      string
	Age       int32
	Gender    string
	UserID    uuid.UUID
}

func (q *Queries) CreatePatient(ctx context.Context, arg CreatePatientParams) (Patient, error) {
	row := q.db.QueryRowContext(ctx, createPatient,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.Age,
		arg.Gender,
		arg.UserID,
	)
	var i Patient
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Age,
		&i.Gender,
		&i.UserID,
	)
	return i, err
}

const getPatientFromUserId = `-- name: GetPatientFromUserId :one
select id, created_at, updated_at, name, age, gender, user_id from patient where user_id = $1
`

func (q *Queries) GetPatientFromUserId(ctx context.Context, userID uuid.UUID) (Patient, error) {
	row := q.db.QueryRowContext(ctx, getPatientFromUserId, userID)
	var i Patient
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Age,
		&i.Gender,
		&i.UserID,
	)
	return i, err
}
